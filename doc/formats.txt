COMPRESSION FORMATS
-------------------

There are two compression formats used. 


The first one is Enigma compression.
Specification: https://segaretro.org/Enigma_compression
(De-)Compression tool: https://segaretro.org/The_Sega_Data_Compressor

It is used for plane mappings (such as cutscene screens, title cards),
and also for some themes for the level background layouts.


The second compression format is documented in Saxman's hacking notes,
quoted below. The compressed data consists of a 16-bit (relative)
pointer, process data and input data. The pointer points to the input
data, the process data follows right after the pointer.
The process data is a bitstream determining what to do with the input
data to get the decompressed data.

    16-bits - relative position pointer to input data
    (following this pointer is process data)

    (process data format in bits)
    1 - direct copy
    00:A - short reference
    01:BBB:AA - long reference

    --1 FORMAT--
    BYTE = INPUT_BYTE

    --00 FORMAT--
    BYTES = COPY A+2 BYTES from POSITION - INPUT_BYTE

    --01 FORMAT--
    If AA is less than 11
    BYTES = COPY AA+3 BYTES from POSITION - INPUT_BYTE - (BBB * 256)
    If AA is equal to 11 and INPUT_BYTE2 >= 6
    BYTES = COPY INPUT_BYTE2 BYTES from POSITION - INPUT_BYTE1 - (BBB * 256)

If the process data bits are 0100011 and the input is 00 00, the compression ends.

If the process data bits are 0100011 and the input is 00 0x where 0 < x < 6,
the temporary buffer is flushed. This needs to be done after the first
BUFFER_SIZE bytes of decompressed data, and then after every another
BUFFER_SIZE/2 bytes. It seems that in all instances BUFFER_SIZE = 0x1000.

The game decompresses into a buffer at $FF77B2 of size 0x1000, 
and once the buffer is full, transfers the first 0x800 bytes to VRAM
and moves the second 0x800 bytes back to $FF77B2.


This compression format is used for ingame art and foreground tile layouts
in levels.


LEVEL FORMATS
-------------

MapHeader_Index (address 0x40442) is an index with pointers relative to
0x4033A, one for each level. It points to map header data, which has the
following format (from Saxman's notes):

byte - Level X size (320 pixels per unit)
byte - Level Y size (224 pixels per unit) (top 2 bits unknown)
byte - Level theme (top 2 bits murder wall flags)
byte - Level background theme (top 4 bits lava/storm/hail)
word - Player object X position
word - Player object Y position
word - Flag object X position
word - Flag object Y position
long - 32-bit address for foreground tile layout
long - 32-bit address for block layout
long - 32-bit address for background tile layout
long - 32-bit address for enemy layout

There are two more tables indexed by the map ID:
MapPtfmLayout_Index (0x43A2)
off_7B1EC (0x7B1EC)
The first one defines the layout of platforms in the level,
the second defines background scrolling.

For foreground tile layout, block layout, enemy layout and platform
layout refer to Saxman's notes.


Enemy layout header
-------------------

Documentation in Saxman's notes is incomplete, see additions:

4 bytes: 32-bit address pointing to 'H1'
4 bytes: 00000000?
2 bytes: first enemy type ID, $FFFF = blank
2 bytes: second enemy type ID, $FFFF = blank
2 bytes: third enemy type ID, $FFFF = blank
2 bytes: 7D00?
1 bytes: H1 - ? (byte)
1 bytes: H2 - Number of objects in level (byte)

The enemy type IDs are from those enemies whose art to load into the respective
VRAM art and palette slots.
The top 2 bits indicate which of the 3 palettes to use for the enemy.

Each level can feature 3 different types of enemies. Each type is allocated
one of 3 VRAM slots for art, and one of 3 slots for palettes. Most enemies
use 7 colors (1 slot), however some use 15 colors and thus use up 2 palette slots
(in that case they always use up slots 2 and 3).
These enemies are: UFO, Robot (those two can share palette), Lion, Bosses.
For these you don't want to put any other enemies in slots 2 or 3 or they will
overwrite these palettes.

Dragons fill up two consecutive art slots, thus they must never go in the 3rd slot.
If you only want to use walking dragons, but no flying dragons, you can put dragons
in the first slot, and put some other enemy in the second slot, which will then
overwrite the flying dragon art.

Rock tanks and shooting rock tanks use the same resources, so only one of them
has to appear in the enemy layout header for both to be usable.

Lions use up 3 art slots, and thus cannot be combined with other enemies.
UFOs use up 2 art slots.

Heady Metal uses up 2 art slots. The main part of the other bosses uses up
2 slots. Boss eyes use up 1 slot.

If a level features a murder wall, geysers or hail storm, the art will use up the
first enemy slot, and thus one can only have two enemy types in that case.


Background scrolling
--------------------

Each level has a 32-bit pointer in the table at off_7B1EC that
points to the scrolling data. The scrolling data is a list of
horizontal scroll speed values, where each value refers to a layer 
that is 8 pixels tall. The data is terminated by a $FF byte.

Values:
00 -- fast automatic scrolling (e.g. clouds)
08 -- slow automatic scrolling (e.g. clouds)
10 -- no scrolling
18-88 (in increments of 8): normal scrolling at different speeds

Automatic scrolling refers to scrolling of the background even
when the screen is not moving. Normal scrolling refers to scrolling
of the background as the screen moves.


Background layout
-----------------

There are two different formats. The first one is used by
Sky, Ice, Island, Swamp, Cave and City levels (Type 1, chunked), the
second by Hill, Desert, Mountain and Forest levels (Type 2, layered).

Before explaining the background format, we need to describe the
theme-specific background chunk definitions first.
The table off_7B3E4 has a 32-bit pointer for each theme,
pointing at another table for each theme.
This table consists of 32-bit pointers to background chunk definitions.

For type 1 themes, a background chunk definition consists of 2 words
(x_size and y_size), followed by x_size*y_size bytes.
Each such byte defines an 8x8 art tile, with the lower 7 bits being
the ID of the tile (within the background art) and the top bit being
a flag indicating whether to horizontally flip the file.
Together this makes a chunk of dimensions x_size * y_size.

For type 2 themes, a background chunk definition consists of a Enigma
compressed plane map of width 64 tiles.


The type 1 level background format defines how a background is composed of 
background chunks. It consists of a list of 6-byte entries, terminated
by 0xFFFF. For each entry, the first word is a background chunk ID, 
followed by 2 words denoting x and y position. Each corresponding chunk
is then copied onto the background map at the given position.

Some levels don't use this format directly, but instead point at another
level's type 1 background data. In this case, their entry starts with
0x8000, followed by 2 words, and a 32-bit pointer. The pointer points to
the type 1 background layout that the level is using, while the 2 words
are an x_shift and a y_shift respectively by which the background is shifted.

The type 2 level background format defines how a background is composed of
layers (each 8 pixels tall). It is a list of bytes, each (except for the
first one or two) determining a layer from the Enigma compressed plane map.
These layers in order then compose the background.

The first byte of the list has a special meaning: For forest and desert
levels, it determines the layer from which on the water/heat ripple
scrolling effect is applied. For all other themes this byte is unused.
For desert, the second byte of the list is not part of the background
layout and is unused. 


The effective height (in tiles) of a background equals ysize_screens * 7 + 21,
where ysize_screens is the vertical foreground size in screen.
The effective width of a background is 64 tiles for layered backgrounds,
and xsize_screens * 10 + 30 for chunked backgrounds.


SPRITE MAPPING FORMATS
----------------------

There is a format for uncompressed art that is dynamically loaded (primarily
used for player sprites) and a format for art that is already in VRAM
(primarily used for enemies).
In the disassembly, the macros sprite_frame_unc and sprite_frame_vram
are used for these respectively.

For more details, see Saxman's notes, 
section MAPPINGS FORMAT FOR PLAYER/ENEMIES.
